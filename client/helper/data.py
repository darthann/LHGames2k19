#########################
# DO NOT EDIT THIS FILE #
#########################
from enum import Enum

DIMENSION = 16

class Direction(Enum):
    UP = 0
    RIGHT = 1
    DOWN = 2
    LEFT = 3
    INVALID = 4

class Team(Enum):
    TEAM_1 = 1
    TEAM_2 = 2
    TEAM_3 = 3
    TEAM_4 = 4

    @staticmethod
    def get_other_teams(team):
        teams = {
            Team.TEAM_1.value,
            Team.TEAM_2.value,
            Team.TEAM_3.value,
            Team.TEAM_4.value,
        }
        teams.remove(team)
        return teams

    @staticmethod
    def from_tail_string(string):
        return {
            'a': Team.TEAM_1.value,
            'b': Team.TEAM_2.value,
            'c': Team.TEAM_3.value,
            'd': Team.TEAM_4.value,
        }[string]

    @staticmethod
    def from_body_string(string):
        return {
            'A': Team.TEAM_1.value,
            'B': Team.TEAM_2.value,
            'C': Team.TEAM_3.value,
            'D': Team.TEAM_4.value,
        }[string]

    @staticmethod
    def from_string(string):
        return {
            '1': Team.TEAM_1.value,
            '2': Team.TEAM_2.value,
            '3': Team.TEAM_3.value,
            '4': Team.TEAM_4.value,
        }[string]

    def __str__(self):
        return str(self.value)

class Point(object):
    def __init__(self, x, y):
        self.__x = x
        self.__y = y

    @property
    def x(self):
        """Get x coordinate of the point"""
        return self.__x

    @property
    def y(self):
        """Get y coordinate of the point"""
        return self.__y

class Tile(object):
    def __init__(self, position, owner, tail, head):
        self.__position = position
        self.__team_owner = owner
        self.__team_tail = tail
        self.__team_head = head

    @property
    def position(self):
        """Get the 2D point of the tile"""
        return self.__position

    @property
    def team_owner(self):
        """Get the team owning this tile if any"""
        return self.__team_owner

    @property
    def team_tail(self):
        """Get the team that has its tail on this tile if any""" 
        return self.__team_tail

    @property
    def team_head(self):
        """Get the team that has its head on this tile if any"""
        return self.__team_head

    @property
    def is_empty(self):
        """Check if there is anything at all on this tile"""
        if self.__team_owner is not None:
            return False
        if self.__team_tail is not None:
            return False
        if self.team_head is not None:
            return False
        return True

    @staticmethod
    def from_string(position, string):
        if len(string) == 0:
            return Tile(position, None, None, None)

        if len(string) != 3:
            raise ValueError("Invalid tile string format: " + string)

        owner = Team.from_body_string(string[0]) if string[0] != "-" else None
        tail = Team.from_tail_string(string[1]) if string[1] != "-" else None
        head = Team.from_string(string[2]) if string[2] != "-" else None

        return Tile(position, owner, tail, head)

    def __str__(self):
        if self.__team_head is not None:
            return "[{}]".format(self.__team_head)
        if self.__team_tail is not None:
            return "({})".format(self.__team_tail)
        if self.__team_owner is not None:
            return " {} ".format(self.__team_owner)
        return "   "

class Map(object):
    def __init__(self, tiles):
        self.__tiles = tiles

    def get_head_position(self, team):
        """Get the 2D point of the head of a team

        Parameters:
        team (Team): The team enumeration value

        Returns:
        Point: The position of the team's head
        """
        for row in self.__tiles:
            for tile in row:
                if tile.team_head == team:
                    return tile.position

        raise KeyError("Could not find team's head in map")

    def get_tail_length(self, team):
        """Get the length of the tail of a team

        Parameters:
        team (Team): The team enumeration value

        Returns:
        int: The length of the team's tail
        """
        size = 0
        for row in self.__tiles:
            for tile in row:
                if tile.team_tail == team:
                    size += 1
        return size

    def get_body_size(self, team):
        """Get the size of the body of a team

        Parameters:
        team (Team): The team enumeration value

        Returns:
        int: The size of the team's body
        """
        size = 0
        for row in self.__tiles:
            for tile in row:
                if tile.team_owner == team:
                    size += 1
        return size

    @property
    def tiles(self):
        """Get the 2D array of tiles describing the map"""
        return self.__tiles

    @staticmethod
    def from_strings(strings):
        if len(strings) != DIMENSION * DIMENSION:
            raise ValueError(f"The received map is not of dimension {DIMENSION}x{DIMENSION}")

        tiles = []
        for j in range(DIMENSION):
            row = []
            for i in range(DIMENSION):
                string = strings[j * DIMENSION + i]
                position = Point(i, j)
                row.append(Tile.from_string(position, string))
            tiles.append(row)

        return Map(tiles)

    def __str__(self):
        string = ""
        for row in self.__tiles:
            for tile in row:
                string += "{},".format(tile)
            string += "\n"
        return string[:-1]

class Player(object):
    def __init__(self, team, position, tail, body):
        self.__team_number = team
        self.__position = position
        self.__size_of_tail = tail
        self.__size_of_body = body

    @property
    def team_number(self):
        """Get the team number of this player"""
        return self.__team_number

    @property
    def position(self):
        """Get the current position of the head of this player"""
        return self.__position

    @property
    def size_of_tail(self):
        """Get the current length of the tail of this player"""
        return self.__size_of_tail

    @property
    def size_of_body(self):
        """Get the current size of the body of this player"""
        return self.__size_of_body

class HostPlayer(Player):
    def __init__(self, team, position, tail, body, max, left, last):
        super(HostPlayer, self).__init__(team, position, tail, body)

        self.__max_movement = max
        self.__movement_left = left
        self.__last_move = last

    @property
    def max_movement(self):
        """Get the current maximum movement allowed for this player"""
        return self.__max_movement

    @property
    def movement_left(self):
        """Get how many movement are left for this player before dying"""
        return self.__movement_left

    @property
    def last_move(self):
        """Get the last move that was done by this palyer"""
        return self.__last_move

class GameInfo(object):
    def __init__(self, map, host, others):
        self.__map = map
        self.__host_player = host
        self.__other_players = others

    @property
    def map(self):
        """Get the current state of the map"""
        return self.__map

    @property
    def host_player(self):
        """Get the current state of the host player"""
        return self.__host_player

    @property
    def other_players(self):
        """Get the current states of the other players"""
        return self.__other_players
