#########################
# DO NOT EDIT THIS FILE #
#########################
from unittest import TestCase, main
from data import *

class TestTile(TestCase):
    def test_from_string_invalids(self):
        self.assertRaises(ValueError, Tile.from_string, None, "--")
        self.assertRaises(ValueError, Tile.from_string, None, "a")

    def test_from_string_1(self):
        tile_uut = Tile.from_string(None, "---")
        self.assertTrue(tile_uut.is_empty)
        self.assertIsNone(tile_uut.team_owner)
        self.assertIsNone(tile_uut.team_tail)
        self.assertIsNone(tile_uut.team_head)

    def test_from_string_2(self):
        tile_uut = Tile.from_string(None, "")
        self.assertTrue(tile_uut.is_empty)
        self.assertIsNone(tile_uut.team_owner)
        self.assertIsNone(tile_uut.team_tail)
        self.assertIsNone(tile_uut.team_head)

    def test_from_string_3(self):
        tile_uut = Tile.from_string(None, "D--")
        self.assertFalse(tile_uut.is_empty)
        self.assertEqual(tile_uut.team_owner, Team.TEAM_4)
        self.assertIsNone(tile_uut.team_tail)
        self.assertIsNone(tile_uut.team_head)

    def test_from_string_4(self):
        tile_uut = Tile.from_string(None, "D-2")
        self.assertFalse(tile_uut.is_empty)
        self.assertEqual(tile_uut.team_owner, Team.TEAM_4)
        self.assertIsNone(tile_uut.team_tail)
        self.assertEqual(tile_uut.team_head, Team.TEAM_2)

    def test_from_string_5(self):
        tile_uut = Tile.from_string(None, "-c-")
        self.assertFalse(tile_uut.is_empty)
        self.assertIsNone(tile_uut.team_owner)
        self.assertEqual(tile_uut.team_tail, Team.TEAM_3)
        self.assertIsNone(tile_uut.team_head)

    def test_from_string_6(self):
        tile_uut = Tile.from_string(None, "Ac-")
        self.assertFalse(tile_uut.is_empty)
        self.assertEqual(tile_uut.team_owner, Team.TEAM_1)
        self.assertEqual(tile_uut.team_tail, Team.TEAM_3)
        self.assertIsNone(tile_uut.team_head)

class TestMap(TestCase):
    def test_from_strings(self):
        map_uut = Map.from_strings([
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "C--", "C--", "C--", "C--", "C--", "D--", "D--", "D--", "-d-", "-d-", "",    "",    "",    "",    "",
            "",    "C--", "C--", "C--", "C--", "C--", "D--", "D--", "D--", "D--", "--4", "",    "",    "",    "",    "",
            "",    "",    "",    "",    "-c-", "-c-", "",    "",    "D--", "D--", "",    "",    "",    "",    "",    "",
            "",    "",    "", "--3", "-c-", "-c-",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "", "A--", "A--",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "", "A--", "A--", "A-1",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "", "A--", "A--", "A--",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "", "A--", "A--",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
            "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",    "",
        ])

        self.assertEqual(len(map_uut.tiles), DIMENSION)
        for i in range(DIMENSION):
            self.assertEqual(len(map_uut.tiles[i]), DIMENSION)

        # head positions
        position = map_uut.get_head_position(Team.TEAM_1)
        self.assertEqual(position.x, 4)
        self.assertEqual(position.y, 11)

        self.assertRaises(KeyError, map_uut.get_head_position, Team.TEAM_2)

        position = map_uut.get_head_position(Team.TEAM_3)
        self.assertEqual(position.x, 3)
        self.assertEqual(position.y, 6)

        position = map_uut.get_head_position(Team.TEAM_4)
        self.assertEqual(position.x, 10)
        self.assertEqual(position.y, 4)

        # tail lengths
        self.assertEqual(map_uut.get_tail_length(Team.TEAM_1), 0)
        self.assertEqual(map_uut.get_tail_length(Team.TEAM_2), 0)
        self.assertEqual(map_uut.get_tail_length(Team.TEAM_3), 4)
        self.assertEqual(map_uut.get_tail_length(Team.TEAM_4), 2)

        # body sizes
        self.assertEqual(map_uut.get_body_size(Team.TEAM_1), 10)
        self.assertEqual(map_uut.get_body_size(Team.TEAM_2), 0)
        self.assertEqual(map_uut.get_body_size(Team.TEAM_3), 10)
        self.assertEqual(map_uut.get_body_size(Team.TEAM_4), 9)

if __name__ == '__main__':
    main()
